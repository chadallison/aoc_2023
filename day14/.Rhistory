'd' = c(1, 0)
)
opposite_dir <- list('r' = 'l', 'u' = 'd', 'd' = 'u', 'l' = 'r')
# reflectors coordinates
reflector_coords <- which(input != '.', arr.ind = TRUE) |> apply(1, paste0, collapse = ':')
lava_energy <- function(start, dir){
energised <- matrix(0L, nrow = nrow(input), ncol = ncol(input))
# have we visited this reflector while coming from the same direction before?
visited <- setNames(vector('list', length(reflector_coords)), reflector_coords)
browse_mat <- function(cur_pos = c(1,1), dir = c('r', 'u', 'd', 'l')) {
# while the beams can keep moving
while(TRUE) {
nxt_pos <- cur_pos + movements[[dir]]
if(nxt_pos[1] < 1 || nxt_pos[1] > nrow(mat) ||
nxt_pos[2] < 1 || nxt_pos[2] > ncol(mat)) break
energised[nxt_pos[1], nxt_pos[2]] <<- 1L
nxt_char <- mat[nxt_pos[1], nxt_pos[2]]
if(nxt_char != '.') {
id <- paste0(nxt_pos, collapse = ':')
# already visited this reflector coming from the same direction, so we know where
# this will go
if(dir %in% visited[[id]]){
break
} else {
visited[[id]] <<- c(visited[[id]], dir) #, opposite_dir[[dir]])
# when splitting visiting from either direction is same
if(nxt_char == '|' && dir %in% c('l', 'r')){
visited[[id]] <<- c(visited[[id]], opposite_dir[[dir]])
}
if(nxt_char == '-' && dir %in% c('u', 'd')){
visited[[id]] <<- c(visited[[id]], opposite_dir[[dir]])
}
}
}
cur_pos <- nxt_pos
# find next direction
if(nxt_char == '.') {
next
} else if(nxt_char == '\\') {
dir <- switch(dir,
'r' = 'd',
'l' = 'u',
'u' = 'l',
'd' = 'r')
} else if (nxt_char == '/') {
dir <- switch(dir,
'r' = 'u',
'l' = 'd',
'u' = 'r',
'd' = 'l')
} else if (nxt_char == '-' && dir %in% c('l', 'r')) {
dir <- dir
} else if (nxt_char == '|' && dir %in% c('u', 'd')) {
dir <- dir
} else if (nxt_char == '|' && dir %in% c('l', 'r')) {
# split
Recall(nxt_pos, dir = 'u')
Recall(nxt_pos, dir = 'd')
break
} else if (nxt_char == '-' && dir %in% c('u', 'd')) {
# split
Recall(nxt_pos, dir = 'l')
Recall(nxt_pos, dir = 'r')
break
}
}
}
# debug(browse_mat)
browse_mat(start, dir)
sum(energised)
}
# Part 1
lava_energy(c(1,0), 'r')
# Part 2
R <- nrow(input)
C <- ncol(input)
p2 <- 0
for(i in 1:R){
print(i)
p2 <- max(p2, lava_energy(c(i, 0)  , 'r')) # from left
p2 <- max(p2, lava_energy(c(i, C+1), 'l')) # from left
}
for(i in 1:C){
print(i)
p2 <- max(p2, lava_energy(c(0, i)  , 'd')) # from left
p2 <- max(p2, lava_energy(c(R+1, i), 'u')) # from left
}
p2
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# file_name <- 'sampl2.txt'
file_name <- 'input.txt'
W <- nchar(readLines(file_name, n = 1))
input <- as.matrix(read.fwf(file_name, widths = rep(1, W)))
mat <- input
movements <- list(
'r' = c(0, 1),
'l' = c(0, -1),
'u' = c(-1, 0),
'd' = c(1, 0)
)
opposite_dir <- list('r' = 'l', 'u' = 'd', 'd' = 'u', 'l' = 'r')
# reflectors coordinates
reflector_coords <- which(input != '.', arr.ind = TRUE) |> apply(1, paste0, collapse = ':')
lava_energy <- function(start, dir){
energised <- matrix(0L, nrow = nrow(input), ncol = ncol(input))
# have we visited this reflector while coming from the same direction before?
visited <- setNames(vector('list', length(reflector_coords)), reflector_coords)
browse_mat <- function(cur_pos = c(1,1), dir = c('r', 'u', 'd', 'l')) {
# while the beams can keep moving
while(TRUE) {
nxt_pos <- cur_pos + movements[[dir]]
if(nxt_pos[1] < 1 || nxt_pos[1] > nrow(mat) ||
nxt_pos[2] < 1 || nxt_pos[2] > ncol(mat)) break
energised[nxt_pos[1], nxt_pos[2]] <<- 1L
nxt_char <- mat[nxt_pos[1], nxt_pos[2]]
if(nxt_char != '.') {
id <- paste0(nxt_pos, collapse = ':')
# already visited this reflector coming from the same direction, so we know where
# this will go
if(dir %in% visited[[id]]){
break
} else {
visited[[id]] <<- c(visited[[id]], dir) #, opposite_dir[[dir]])
# when splitting visiting from either direction is same
if(nxt_char == '|' && dir %in% c('l', 'r')){
visited[[id]] <<- c(visited[[id]], opposite_dir[[dir]])
}
if(nxt_char == '-' && dir %in% c('u', 'd')){
visited[[id]] <<- c(visited[[id]], opposite_dir[[dir]])
}
}
}
cur_pos <- nxt_pos
# find next direction
if(nxt_char == '.') {
next
} else if(nxt_char == '\\') {
dir <- switch(dir,
'r' = 'd',
'l' = 'u',
'u' = 'l',
'd' = 'r')
} else if (nxt_char == '/') {
dir <- switch(dir,
'r' = 'u',
'l' = 'd',
'u' = 'r',
'd' = 'l')
} else if (nxt_char == '-' && dir %in% c('l', 'r')) {
dir <- dir
} else if (nxt_char == '|' && dir %in% c('u', 'd')) {
dir <- dir
} else if (nxt_char == '|' && dir %in% c('l', 'r')) {
# split
Recall(nxt_pos, dir = 'u')
Recall(nxt_pos, dir = 'd')
break
} else if (nxt_char == '-' && dir %in% c('u', 'd')) {
# split
Recall(nxt_pos, dir = 'l')
Recall(nxt_pos, dir = 'r')
break
}
}
}
# debug(browse_mat)
browse_mat(start, dir)
sum(energised)
}
# Part 1
lava_energy(c(1,0), 'r')
# Part 2
R <- nrow(input)
C <- ncol(input)
p2 <- 0
for(i in 1:R){
# print(i)
p2 <- max(p2, lava_energy(c(i, 0)  , 'r')) # from left
p2 <- max(p2, lava_energy(c(i, C+1), 'l')) # from left
}
for(i in 1:C){
# print(i)
p2 <- max(p2, lava_energy(c(0, i)  , 'd')) # from left
p2 <- max(p2, lava_energy(c(R+1, i), 'u')) # from left
}
p2
# Part 1
lava_energy(c(1,0), 'r')
# Part 1
sprintf("part 1 solution: %s", lava_energy(c(1,0), 'r'))
sprintf("part 2 solution: %s", p2)
input = readLines("input.txt")
input
input[1:5]
input[1]
input[1] |>
substr(1, 5)
input[1] |> substr(1, 10)
parse <- function(input) {
grid <- read.table(text = input, sep = "", header = FALSE)
grid <- as.matrix(grid) - '0'
grid <- matrix(as.numeric(grid), nrow = nrow(grid), ncol = ncol(grid))
}
part1 <- function(grid) {
astar(grid, 1, 3)
}
part2 <- function(grid) {
astar(grid, 4, 10)
}
astar <- function(grid, L, U) {
width <- ncol(grid)
height <- nrow(grid)
heat <- as.vector(grid)
index <- 1
todo <- vector("list", 100)
cost <- matrix(0, nrow = length(heat), ncol = 2)
todo[[1]] <- list(c(1, 1, 0), c(1, 1, 1))
while (TRUE) {
while (length(todo[[index]]) > 0) {
state <- todo[[index]][length(todo[[index]])]
todo[[index]] <- todo[[index]][-length(todo[[index]])]
x <- state[1]
y <- state[2]
direction <- state[3]
steps <- cost[(width * (y - 1)) + x, direction + 1]
heuristic <- function(x, y, cost) (cost + width - x + height - y) %% 100
if (x == width && y == height) {
return(steps)
}
if (direction == 0) {
index_left <- (width * (y - 1)) + x - 1
steps_left <- steps
for (i in 1:U) {
if (i > x) {
break
}
index_left <- index_left - 1
steps_left <- steps_left + heat[index_left]
if (i >= L && (cost[index_left, 2] == 0 || steps_left < cost[index_left, 2])) {
todo[[heuristic(x - i, y, steps_left) + 1]] <- c(todo[[heuristic(x - i, y, steps_left) + 1]], c(x - i, y, 1))
cost[index_left, 2] <- steps_left
}
}
index_right <- (width * (y - 1)) + x
steps_right <- steps
for (i in 1:U) {
if (x + i > width) {
break
}
index_right <- index_right + 1
steps_right <- steps_right + heat[index_right]
if (i >= L && (cost[index_right, 2] == 0 || steps_right < cost[index_right, 2])) {
todo[[heuristic(x + i, y, steps_right) + 1]] <- c(todo[[heuristic(x + i, y, steps_right) + 1]], c(x + i, y, 1))
cost[index_right, 2] <- steps_right
}
}
} else {
index_up <- (width * (y - 2)) + x
steps_up <- steps
for (i in 1:U) {
if (i > y) {
break
}
index_up <- index_up - width
steps_up <- steps_up + heat[index_up]
if (i >= L && (cost[index_up, 1] == 0 || steps_up < cost[index_up, 1])) {
todo[[heuristic(x, y - i, steps_up) + 1]] <- c(todo[[heuristic(x, y - i, steps_up) + 1]], c(x, y - i, 0))
cost[index_up, 1] <- steps_up
}
}
index_down <- (width * y) + x
steps_down <- steps
for (i in 1:U) {
if (y + i > height) {
break
}
index_down <- index_down + width
steps_down <- steps_down + heat[index_down]
if (i >= L && (cost[index_down, 1] == 0 || steps_down < cost[index_down, 1])) {
todo[[heuristic(x, y + i, steps_down) + 1]] <- c(todo[[heuristic(x, y + i, steps_down) + 1]], c(x, y + i, 0))
cost[index_down, 1] <- steps_down
}
}
}
}
index <- index + 1
}
}
parse(input)
# file_name <- 'sample.txt'
# file_name <- 'sample2.txt'
file_name <- 'input.txt'
W <- nchar(readLines(file_name, n = 1))
input <- as.matrix(read.fwf(file_name, widths = rep(1, W), colClasses = 'integer'))
mode(input) <- 'integer'
# generate the four possible new directions to move in along with the direction
# the new movement would be in and consecutive steps
next_points <- function(curr, direction, consecutive_steps, min_steps, max_steps){
# direction top right down left
# directions + new steps + new_direction
next_pts <- list(c(-1, 0, 1, 1), c(0, 1, 1, 2), c(1, 0, 1, 3), c(0, -1, 1, 4))
next_pts[[direction]][3] <- consecutive_steps + 1
# keep direction from 1 to 4 (north, east, south, west)
# remove reverse direction
to_remove <- (direction + 2 - 1) %% 4 + 1
# if less than 4 steps, only move in that direction
if(consecutive_steps < min_steps){
return(next_pts[direction])
}
if(consecutive_steps == max_steps){
to_remove <- c(direction, to_remove)
}
next_pts <- next_pts[-to_remove]
next_pts
}
dijkstra <- function(graph, part2){
N <- nrow(graph)
C <- ncol(graph)
goal <- c(N,C)
start <- c(1,1)
# directions north, east, south, west - 1, 2, 3, 4
# coordinates, direction, consecutive steps
openset <- collections::priority_queue()
initial_d <- c(start, 2, 0) # start from top left, going right, no consecutive steps now
openset$push(initial_d, priority = 0)
# score
mindist <- collections::dict()
mindist$set(initial_d, 0)
while(openset$size() > 0){
curr <- openset$pop()
d <- mindist$get(curr, Inf)
if(!part2){
adjacent <- next_points(curr[1:2], curr[3], curr[4], 1, 3)
} else {
adjacent <- next_points(curr[1:2], curr[3], curr[4], 4, 10)
}
for(i in seq_along(adjacent)) {
nbr  <- adjacent[[i]]
nx   <- nbr[1] + curr[1]
ny   <- nbr[2] + curr[2]
if(nx > N || ny > C || nx < 1 || ny < 1){
next
}
alt <- d + graph[nx,ny]
key <- c(nx, ny, nbr[4], nbr[3])
if(alt < mindist$get(key, Inf)){
mindist$set(key, alt)
openset$push(key, priority = -alt)
}
}
}
# get all dists for reaching end goal given the conditions
keys <- mindist$keys()
if(!part2){
end_goal_keys <- vapply(keys, \(x) x[1] == goal[1] && x[2] == goal[2], TRUE)
} else {
end_goal_keys <- vapply(keys, \(x) x[1] == goal[1] && x[2] == goal[2] && x[4] >= 4, TRUE)
}
# for all ways of reaching end, find min dist
end_goal_dists <- vapply(keys[end_goal_keys], \(k) mindist$get(k, Inf), 2)
min(end_goal_dists)
}
# Part 1
dijkstra(input, part2 = FALSE)
install.packages("collections")
# Part 1
dijkstra(input, part2 = FALSE)
# Part 2
dijkstra(input, part2 = TRUE)
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# file_name <- 'sample.txt'
# file_name <- 'sample2.txt'
file_name <- 'input.txt'
W <- nchar(readLines(file_name, n = 1))
input <- as.matrix(read.fwf(file_name, widths = rep(1, W), colClasses = 'integer'))
mode(input) <- 'integer'
# generate the four possible new directions to move in along with the direction
# the new movement would be in and consecutive steps
next_points <- function(curr, direction, consecutive_steps, min_steps, max_steps){
# direction top right down left
# directions + new steps + new_direction
next_pts <- list(c(-1, 0, 1, 1), c(0, 1, 1, 2), c(1, 0, 1, 3), c(0, -1, 1, 4))
next_pts[[direction]][3] <- consecutive_steps + 1
# keep direction from 1 to 4 (north, east, south, west)
# remove reverse direction
to_remove <- (direction + 2 - 1) %% 4 + 1
# if less than 4 steps, only move in that direction
if(consecutive_steps < min_steps){
return(next_pts[direction])
}
if(consecutive_steps == max_steps){
to_remove <- c(direction, to_remove)
}
next_pts <- next_pts[-to_remove]
next_pts
}
dijkstra <- function(graph, part2){
N <- nrow(graph)
C <- ncol(graph)
goal <- c(N,C)
start <- c(1,1)
# directions north, east, south, west - 1, 2, 3, 4
# coordinates, direction, consecutive steps
openset <- collections::priority_queue()
initial_d <- c(start, 2, 0) # start from top left, going right, no consecutive steps now
openset$push(initial_d, priority = 0)
# score
mindist <- collections::dict()
mindist$set(initial_d, 0)
while(openset$size() > 0){
curr <- openset$pop()
d <- mindist$get(curr, Inf)
if(!part2){
adjacent <- next_points(curr[1:2], curr[3], curr[4], 1, 3)
} else {
adjacent <- next_points(curr[1:2], curr[3], curr[4], 4, 10)
}
for(i in seq_along(adjacent)) {
nbr  <- adjacent[[i]]
nx   <- nbr[1] + curr[1]
ny   <- nbr[2] + curr[2]
if(nx > N || ny > C || nx < 1 || ny < 1){
next
}
alt <- d + graph[nx,ny]
key <- c(nx, ny, nbr[4], nbr[3])
if(alt < mindist$get(key, Inf)){
mindist$set(key, alt)
openset$push(key, priority = -alt)
}
}
}
# get all dists for reaching end goal given the conditions
keys <- mindist$keys()
if(!part2){
end_goal_keys <- vapply(keys, \(x) x[1] == goal[1] && x[2] == goal[2], TRUE)
} else {
end_goal_keys <- vapply(keys, \(x) x[1] == goal[1] && x[2] == goal[2] && x[4] >= 4, TRUE)
}
# for all ways of reaching end, find min dist
end_goal_dists <- vapply(keys[end_goal_keys], \(k) mindist$get(k, Inf), 2)
min(end_goal_dists)
}
# Part 1
p1 = dijkstra(input, part2 = FALSE)
sprintf("part 1 solution: %s", p1)
# Part 2
p2 = dijkstra(input, part2 = TRUE)
sprintf("part 2 solution: %s", p2)
file_name = "input.txt"
W = nchar(readLines(file_name, n = 1))
input = as.matrix(read.fwf(file_name, widths = rep(1, W), colClasses = "integer"))
mode(input) = "integer"
next_points = function(curr, direction, consecutive_steps, min_steps, max_steps){
next_pts = list(c(-1, 0, 1, 1), c(0, 1, 1, 2), c(1, 0, 1, 3), c(0, -1, 1, 4))
next_pts[[direction]][3] = consecutive_steps + 1
to_remove = (direction + 2 - 1) %% 4 + 1
if (consecutive_steps < min_steps) {
return(next_pts[direction])
}
if (consecutive_steps == max_steps) {
to_remove = c(direction, to_remove)
}
next_pts = next_pts[-to_remove]
next_pts
}
dijkstra = function(graph, part2){
N = nrow(graph)
C = ncol(graph)
goal = c(N, C)
start = c(1, 1)
openset = collections::priority_queue()
initial_d = c(start, 2, 0) # start from top left, going right, no consecutive steps now
openset$push(initial_d, priority = 0)
mindist = collections::dict()
mindist$set(initial_d, 0)
while (openset$size() > 0) {
curr = openset$pop()
d = mindist$get(curr, Inf)
if (!part2) {
adjacent = next_points(curr[1:2], curr[3], curr[4], 1, 3)
} else {
adjacent = next_points(curr[1:2], curr[3], curr[4], 4, 10)
}
for (i in seq_along(adjacent)) {
nbr  = adjacent[[i]]
nx   = nbr[1] + curr[1]
ny   = nbr[2] + curr[2]
if (nx > N || ny > C || nx < 1 || ny < 1) next
alt = d + graph[nx, ny]
key = c(nx, ny, nbr[4], nbr[3])
if (alt < mindist$get(key, Inf)) {
mindist$set(key, alt)
openset$push(key, priority = -alt)
}
}
}
keys = mindist$keys()
if(!part2){
end_goal_keys = vapply(keys, \(x) x[1] == goal[1] && x[2] == goal[2], T)
} else {
end_goal_keys = vapply(keys, \(x) x[1] == goal[1] && x[2] == goal[2] && x[4] >= 4, T)
}
end_goal_dists = vapply(keys[end_goal_keys], \(k) mindist$get(k, Inf), 2)
min(end_goal_dists)
}
# part 1
p1 = dijkstra(input, part2 = FALSE)
sprintf("part 1 solution: %s", p1)
# part 2
p2 = dijkstra(input, part2 = TRUE)
sprintf("part 2 solution: %s", p2)
